from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from datetime import datetime

def generate_pdf_report(study_plan_content: str, filename: str = "study_plan_report.pdf"):
    """
    Generate a professional PDF report from the study plan content.
    
    Args:
        study_plan_content (str): The study plan content to include in the report
        filename (str): Name of the output PDF file
    """
    doc = SimpleDocTemplate(filename, pagesize=A4, 
                          rightMargin=inch, leftMargin=inch,
                          topMargin=inch, bottomMargin=inch)
    
    # Get styles
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        spaceAfter=30,
        alignment=1,  # Center alignment
        textColor=colors.darkblue,
        fontName='Helvetica-Bold'
    )
    
    header_style = ParagraphStyle(
        'CustomHeader',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        textColor=colors.darkblue,
        fontName='Helvetica-Bold'
    )
    
    content_style = ParagraphStyle(
        'CustomContent',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=8,
        fontName='Helvetica'
    )
    
    # Build content
    content = []
    
    # Title
    content.append(Paragraph("PERSONALIZED STUDY PLAN REPORT", title_style))
    content.append(Spacer(1, 12))
    
    # Date and time
    current_date = datetime.now().strftime("%B %d, %Y at %I:%M %p")
    content.append(Paragraph(f"Generated on: {current_date}", content_style))
    content.append(Spacer(1, 20))
    
    # Add border table for header info
    header_data = [
        ['Report Type:', 'Academic Study Plan'],
        ['Duration:', '4 Weeks'],
        ['Status:', 'Active']
    ]
    
    header_table = Table(header_data, colWidths=[2*inch, 4*inch])
    header_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('TOPPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    content.append(header_table)
    content.append(Spacer(1, 20))
    
    # Study Plan Content
    content.append(Paragraph("DETAILED STUDY PLAN", header_style))
    
    # Process the study plan content and add it
    lines = study_plan_content.split('\n')
    for line in lines:
        if line.strip():
            # Style different parts of the content
            if line.startswith('### Week') or line.startswith('Week'):
                content.append(Spacer(1, 15))
                # Clean up the week heading
                clean_week = line.replace('### ', '').replace('**', '').strip()
                content.append(Paragraph(clean_week, header_style))
                content.append(Spacer(1, 8))
            elif '**Day' in line and ('Monday' in line or 'Tuesday' in line or 'Wednesday' in line or 'Thursday' in line or 'Friday' in line or 'Saturday' in line or 'Sunday' in line):
                content.append(Spacer(1, 8))
                # Clean up the day heading
                clean_day = line.replace('- ', '').replace('**', '').replace('•', '').strip()
                day_style = ParagraphStyle(
                    'DayStyle',
                    parent=styles['Heading3'],
                    fontSize=12,
                    spaceAfter=6,
                    textColor=colors.darkgreen,
                    fontName='Helvetica-Bold'
                )
                content.append(Paragraph(clean_day, day_style))
            elif line.startswith('- ') and ('→' in line or 'PM' in line or 'AM' in line):
                # Format study session entries
                clean_line = line.replace('- ', '• ').strip()
                session_style = ParagraphStyle(
                    'SessionStyle',
                    parent=styles['Normal'],
                    fontSize=10,
                    leftIndent=20,
                    spaceAfter=4,
                    fontName='Helvetica'
                )
                content.append(Paragraph(clean_line, session_style))
            else:
                content.append(Paragraph(line, content_style))
    
    # Footer
    content.append(Spacer(1, 30))
    footer_table = Table([['This report was automatically generated by the Study Plan Generator System']], 
                        colWidths=[6*inch])
    footer_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, -1), colors.lightblue),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.darkblue),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Oblique'),
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
        ('TOPPADDING', (0, 0), (-1, -1), 8),
        ('GRID', (0, 0), (-1, -1), 1, colors.darkblue)
    ]))
    
    content.append(footer_table)
    
    # Build PDF
    doc.build(content)
    print(f"PDF report generated successfully: {filename}")